// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module csrng_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output csrng_reg_pkg::csrng_reg2hw_t reg2hw, // Write
  input  csrng_reg_pkg::csrng_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import csrng_reg_pkg::* ;

  localparam int AW = 8;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  assign tl_reg_h2d = tl_i;
  assign tl_o       = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_cs_ins_req_done_qs;
  logic intr_state_cs_ins_req_done_wd;
  logic intr_state_cs_ins_req_done_we;
  logic intr_state_cs_res_req_done_qs;
  logic intr_state_cs_res_req_done_wd;
  logic intr_state_cs_res_req_done_we;
  logic intr_state_cs_gen_req_done_qs;
  logic intr_state_cs_gen_req_done_wd;
  logic intr_state_cs_gen_req_done_we;
  logic intr_state_cs_upd_req_done_qs;
  logic intr_state_cs_upd_req_done_wd;
  logic intr_state_cs_upd_req_done_we;
  logic intr_state_cs_uni_req_done_qs;
  logic intr_state_cs_uni_req_done_wd;
  logic intr_state_cs_uni_req_done_we;
  logic intr_state_cs_fifo_err_qs;
  logic intr_state_cs_fifo_err_wd;
  logic intr_state_cs_fifo_err_we;
  logic intr_enable_cs_ins_req_done_qs;
  logic intr_enable_cs_ins_req_done_wd;
  logic intr_enable_cs_ins_req_done_we;
  logic intr_enable_cs_res_req_done_qs;
  logic intr_enable_cs_res_req_done_wd;
  logic intr_enable_cs_res_req_done_we;
  logic intr_enable_cs_gen_req_done_qs;
  logic intr_enable_cs_gen_req_done_wd;
  logic intr_enable_cs_gen_req_done_we;
  logic intr_enable_cs_upd_req_done_qs;
  logic intr_enable_cs_upd_req_done_wd;
  logic intr_enable_cs_upd_req_done_we;
  logic intr_enable_cs_uni_req_done_qs;
  logic intr_enable_cs_uni_req_done_wd;
  logic intr_enable_cs_uni_req_done_we;
  logic intr_enable_cs_fifo_err_qs;
  logic intr_enable_cs_fifo_err_wd;
  logic intr_enable_cs_fifo_err_we;
  logic intr_test_cs_ins_req_done_wd;
  logic intr_test_cs_ins_req_done_we;
  logic intr_test_cs_res_req_done_wd;
  logic intr_test_cs_res_req_done_we;
  logic intr_test_cs_gen_req_done_wd;
  logic intr_test_cs_gen_req_done_we;
  logic intr_test_cs_upd_req_done_wd;
  logic intr_test_cs_upd_req_done_we;
  logic intr_test_cs_uni_req_done_wd;
  logic intr_test_cs_uni_req_done_we;
  logic intr_test_cs_fifo_err_wd;
  logic intr_test_cs_fifo_err_we;
  logic cs_regen_qs;
  logic cs_regen_wd;
  logic cs_regen_we;
  logic cs_ctrl_cs_enable_qs;
  logic cs_ctrl_cs_enable_wd;
  logic cs_ctrl_cs_enable_we;
  logic [3:0] cs_ctrl_fifo_depth_sts_sel_qs;
  logic [3:0] cs_ctrl_fifo_depth_sts_sel_wd;
  logic cs_ctrl_fifo_depth_sts_sel_we;
  logic [23:0] cs_sum_sts_fifo_depth_sts_qs;
  logic [23:0] cs_sum_sts_fifo_depth_sts_wd;
  logic cs_sum_sts_fifo_depth_sts_we;
  logic cs_sum_sts_diag_qs;
  logic cs_sum_sts_diag_wd;
  logic cs_sum_sts_diag_we;
  logic cs_app_ins_req_ins_req0_wd;
  logic cs_app_ins_req_ins_req0_we;
  logic cs_app_ins_req_ins_req1_wd;
  logic cs_app_ins_req_ins_req1_we;
  logic cs_app_ins_req_ins_req2_wd;
  logic cs_app_ins_req_ins_req2_we;
  logic cs_app_ins_req_ins_req3_wd;
  logic cs_app_ins_req_ins_req3_we;
  logic cs_app_seed_clr_app_seed_clr0_wd;
  logic cs_app_seed_clr_app_seed_clr0_we;
  logic cs_app_seed_clr_app_seed_clr1_wd;
  logic cs_app_seed_clr_app_seed_clr1_we;
  logic cs_app_seed_clr_app_seed_clr2_wd;
  logic cs_app_seed_clr_app_seed_clr2_we;
  logic cs_app_seed_clr_app_seed_clr3_wd;
  logic cs_app_seed_clr_app_seed_clr3_we;
  logic cs_det_mode_det_mode0_qs;
  logic cs_det_mode_det_mode0_wd;
  logic cs_det_mode_det_mode0_we;
  logic cs_det_mode_det_mode1_qs;
  logic cs_det_mode_det_mode1_wd;
  logic cs_det_mode_det_mode1_we;
  logic cs_det_mode_det_mode2_qs;
  logic cs_det_mode_det_mode2_wd;
  logic cs_det_mode_det_mode2_we;
  logic cs_det_mode_det_mode3_qs;
  logic cs_det_mode_det_mode3_wd;
  logic cs_det_mode_det_mode3_we;
  logic cs_app_ins_ack_ins_ack0_qs;
  logic cs_app_ins_ack_ins_ack0_wd;
  logic cs_app_ins_ack_ins_ack0_we;
  logic cs_app_ins_ack_ins_ack1_qs;
  logic cs_app_ins_ack_ins_ack1_wd;
  logic cs_app_ins_ack_ins_ack1_we;
  logic cs_app_ins_ack_ins_ack2_qs;
  logic cs_app_ins_ack_ins_ack2_wd;
  logic cs_app_ins_ack_ins_ack2_we;
  logic cs_app_ins_ack_ins_ack3_qs;
  logic cs_app_ins_ack_ins_ack3_wd;
  logic cs_app_ins_ack_ins_ack3_we;
  logic [1:0] cs_app_ins_sts_ins_sts0_qs;
  logic [1:0] cs_app_ins_sts_ins_sts0_wd;
  logic cs_app_ins_sts_ins_sts0_we;
  logic [1:0] cs_app_ins_sts_ins_sts1_qs;
  logic [1:0] cs_app_ins_sts_ins_sts1_wd;
  logic cs_app_ins_sts_ins_sts1_we;
  logic [1:0] cs_app_ins_sts_ins_sts2_qs;
  logic [1:0] cs_app_ins_sts_ins_sts2_wd;
  logic cs_app_ins_sts_ins_sts2_we;
  logic [1:0] cs_app_ins_sts_ins_sts3_qs;
  logic [1:0] cs_app_ins_sts_ins_sts3_wd;
  logic cs_app_ins_sts_ins_sts3_we;
  logic [1:0] cs_app_seed_fifo_sts_app_seed_fifo_sts0_qs;
  logic cs_app_seed_fifo_sts_app_seed_fifo_sts0_re;
  logic [1:0] cs_app_seed_fifo_sts_app_seed_fifo_sts1_qs;
  logic cs_app_seed_fifo_sts_app_seed_fifo_sts1_re;
  logic [1:0] cs_app_seed_fifo_sts_app_seed_fifo_sts2_qs;
  logic cs_app_seed_fifo_sts_app_seed_fifo_sts2_re;
  logic [1:0] cs_app_seed_fifo_sts_app_seed_fifo_sts3_qs;
  logic cs_app_seed_fifo_sts_app_seed_fifo_sts3_re;
  logic [31:0] cs_app_ins_seed0_wd;
  logic cs_app_ins_seed0_we;
  logic [31:0] cs_app_ins_seed1_wd;
  logic cs_app_ins_seed1_we;
  logic [31:0] cs_app_ins_seed2_wd;
  logic cs_app_ins_seed2_we;
  logic [31:0] cs_app_ins_seed3_wd;
  logic cs_app_ins_seed3_we;
  logic cs_app_res_req_res_req0_wd;
  logic cs_app_res_req_res_req0_we;
  logic cs_app_res_req_res_req1_wd;
  logic cs_app_res_req_res_req1_we;
  logic cs_app_res_req_res_req2_wd;
  logic cs_app_res_req_res_req2_we;
  logic cs_app_res_req_res_req3_wd;
  logic cs_app_res_req_res_req3_we;
  logic cs_app_res_ack_res_ack0_qs;
  logic cs_app_res_ack_res_ack0_wd;
  logic cs_app_res_ack_res_ack0_we;
  logic cs_app_res_ack_res_ack1_qs;
  logic cs_app_res_ack_res_ack1_wd;
  logic cs_app_res_ack_res_ack1_we;
  logic cs_app_res_ack_res_ack2_qs;
  logic cs_app_res_ack_res_ack2_wd;
  logic cs_app_res_ack_res_ack2_we;
  logic cs_app_res_ack_res_ack3_qs;
  logic cs_app_res_ack_res_ack3_wd;
  logic cs_app_res_ack_res_ack3_we;
  logic [1:0] cs_app_res_sts_res_sts0_qs;
  logic [1:0] cs_app_res_sts_res_sts0_wd;
  logic cs_app_res_sts_res_sts0_we;
  logic [1:0] cs_app_res_sts_res_sts1_qs;
  logic [1:0] cs_app_res_sts_res_sts1_wd;
  logic cs_app_res_sts_res_sts1_we;
  logic [1:0] cs_app_res_sts_res_sts2_qs;
  logic [1:0] cs_app_res_sts_res_sts2_wd;
  logic cs_app_res_sts_res_sts2_we;
  logic [1:0] cs_app_res_sts_res_sts3_qs;
  logic [1:0] cs_app_res_sts_res_sts3_wd;
  logic cs_app_res_sts_res_sts3_we;
  logic cs_app_gen_req_gen_req0_wd;
  logic cs_app_gen_req_gen_req0_we;
  logic cs_app_gen_req_gen_req1_wd;
  logic cs_app_gen_req_gen_req1_we;
  logic cs_app_gen_req_gen_req2_wd;
  logic cs_app_gen_req_gen_req2_we;
  logic cs_app_gen_req_gen_req3_wd;
  logic cs_app_gen_req_gen_req3_we;
  logic cs_app_rnd_out_clr_rnd_out_clr0_wd;
  logic cs_app_rnd_out_clr_rnd_out_clr0_we;
  logic cs_app_rnd_out_clr_rnd_out_clr1_wd;
  logic cs_app_rnd_out_clr_rnd_out_clr1_we;
  logic cs_app_rnd_out_clr_rnd_out_clr2_wd;
  logic cs_app_rnd_out_clr_rnd_out_clr2_we;
  logic cs_app_rnd_out_clr_rnd_out_clr3_wd;
  logic cs_app_rnd_out_clr_rnd_out_clr3_we;
  logic cs_app_pre_res_pre_res0_qs;
  logic cs_app_pre_res_pre_res0_wd;
  logic cs_app_pre_res_pre_res0_we;
  logic cs_app_pre_res_pre_res1_qs;
  logic cs_app_pre_res_pre_res1_wd;
  logic cs_app_pre_res_pre_res1_we;
  logic cs_app_pre_res_pre_res2_qs;
  logic cs_app_pre_res_pre_res2_wd;
  logic cs_app_pre_res_pre_res2_we;
  logic cs_app_pre_res_pre_res3_qs;
  logic cs_app_pre_res_pre_res3_wd;
  logic cs_app_pre_res_pre_res3_we;
  logic cs_app_gen_ack_gen_ack0_qs;
  logic cs_app_gen_ack_gen_ack0_wd;
  logic cs_app_gen_ack_gen_ack0_we;
  logic cs_app_gen_ack_gen_ack1_qs;
  logic cs_app_gen_ack_gen_ack1_wd;
  logic cs_app_gen_ack_gen_ack1_we;
  logic cs_app_gen_ack_gen_ack2_qs;
  logic cs_app_gen_ack_gen_ack2_wd;
  logic cs_app_gen_ack_gen_ack2_we;
  logic cs_app_gen_ack_gen_ack3_qs;
  logic cs_app_gen_ack_gen_ack3_wd;
  logic cs_app_gen_ack_gen_ack3_we;
  logic [1:0] cs_app_gen_sts_gen_sts0_qs;
  logic [1:0] cs_app_gen_sts_gen_sts0_wd;
  logic cs_app_gen_sts_gen_sts0_we;
  logic [1:0] cs_app_gen_sts_gen_sts1_qs;
  logic [1:0] cs_app_gen_sts_gen_sts1_wd;
  logic cs_app_gen_sts_gen_sts1_we;
  logic [1:0] cs_app_gen_sts_gen_sts2_qs;
  logic [1:0] cs_app_gen_sts_gen_sts2_wd;
  logic cs_app_gen_sts_gen_sts2_we;
  logic [1:0] cs_app_gen_sts_gen_sts3_qs;
  logic [1:0] cs_app_gen_sts_gen_sts3_wd;
  logic cs_app_gen_sts_gen_sts3_we;
  logic cs_app_gen_rnd_out_vld_rnd_out_vld0_qs;
  logic cs_app_gen_rnd_out_vld_rnd_out_vld0_re;
  logic cs_app_gen_rnd_out_vld_rnd_out_vld1_qs;
  logic cs_app_gen_rnd_out_vld_rnd_out_vld1_re;
  logic cs_app_gen_rnd_out_vld_rnd_out_vld2_qs;
  logic cs_app_gen_rnd_out_vld_rnd_out_vld2_re;
  logic cs_app_gen_rnd_out_vld_rnd_out_vld3_qs;
  logic cs_app_gen_rnd_out_vld_rnd_out_vld3_re;
  logic [31:0] cs_rnd_out_bits0_qs;
  logic cs_rnd_out_bits0_re;
  logic [31:0] cs_rnd_out_bits1_qs;
  logic cs_rnd_out_bits1_re;
  logic [31:0] cs_rnd_out_bits2_qs;
  logic cs_rnd_out_bits2_re;
  logic [31:0] cs_rnd_out_bits3_qs;
  logic cs_rnd_out_bits3_re;
  logic cs_app_upd_req_upd_req0_wd;
  logic cs_app_upd_req_upd_req0_we;
  logic cs_app_upd_req_upd_req1_wd;
  logic cs_app_upd_req_upd_req1_we;
  logic cs_app_upd_req_upd_req2_wd;
  logic cs_app_upd_req_upd_req2_we;
  logic cs_app_upd_req_upd_req3_wd;
  logic cs_app_upd_req_upd_req3_we;
  logic cs_add_data_clr_add_data_clr0_wd;
  logic cs_add_data_clr_add_data_clr0_we;
  logic cs_add_data_clr_add_data_clr1_wd;
  logic cs_add_data_clr_add_data_clr1_we;
  logic cs_add_data_clr_add_data_clr2_wd;
  logic cs_add_data_clr_add_data_clr2_we;
  logic cs_add_data_clr_add_data_clr3_wd;
  logic cs_add_data_clr_add_data_clr3_we;
  logic cs_app_upd_ack_upd_ack0_qs;
  logic cs_app_upd_ack_upd_ack0_wd;
  logic cs_app_upd_ack_upd_ack0_we;
  logic cs_app_upd_ack_upd_ack1_qs;
  logic cs_app_upd_ack_upd_ack1_wd;
  logic cs_app_upd_ack_upd_ack1_we;
  logic cs_app_upd_ack_upd_ack2_qs;
  logic cs_app_upd_ack_upd_ack2_wd;
  logic cs_app_upd_ack_upd_ack2_we;
  logic cs_app_upd_ack_upd_ack3_qs;
  logic cs_app_upd_ack_upd_ack3_wd;
  logic cs_app_upd_ack_upd_ack3_we;
  logic [1:0] cs_app_upd_sts_upd_sts0_qs;
  logic [1:0] cs_app_upd_sts_upd_sts0_wd;
  logic cs_app_upd_sts_upd_sts0_we;
  logic [1:0] cs_app_upd_sts_upd_sts1_qs;
  logic [1:0] cs_app_upd_sts_upd_sts1_wd;
  logic cs_app_upd_sts_upd_sts1_we;
  logic [1:0] cs_app_upd_sts_upd_sts2_qs;
  logic [1:0] cs_app_upd_sts_upd_sts2_wd;
  logic cs_app_upd_sts_upd_sts2_we;
  logic [1:0] cs_app_upd_sts_upd_sts3_qs;
  logic [1:0] cs_app_upd_sts_upd_sts3_wd;
  logic cs_app_upd_sts_upd_sts3_we;
  logic [1:0] cs_add_data_fifo_sts_add_data_fifo_sts0_qs;
  logic cs_add_data_fifo_sts_add_data_fifo_sts0_re;
  logic [1:0] cs_add_data_fifo_sts_add_data_fifo_sts1_qs;
  logic cs_add_data_fifo_sts_add_data_fifo_sts1_re;
  logic [1:0] cs_add_data_fifo_sts_add_data_fifo_sts2_qs;
  logic cs_add_data_fifo_sts_add_data_fifo_sts2_re;
  logic [1:0] cs_add_data_fifo_sts_add_data_fifo_sts3_qs;
  logic cs_add_data_fifo_sts_add_data_fifo_sts3_re;
  logic [31:0] cs_add_data_in0_wd;
  logic cs_add_data_in0_we;
  logic [31:0] cs_add_data_in1_wd;
  logic cs_add_data_in1_we;
  logic [31:0] cs_add_data_in2_wd;
  logic cs_add_data_in2_we;
  logic [31:0] cs_add_data_in3_wd;
  logic cs_add_data_in3_we;
  logic cs_app_uni_req_uni_req0_wd;
  logic cs_app_uni_req_uni_req0_we;
  logic cs_app_uni_req_uni_req1_wd;
  logic cs_app_uni_req_uni_req1_we;
  logic cs_app_uni_req_uni_req2_wd;
  logic cs_app_uni_req_uni_req2_we;
  logic cs_app_uni_req_uni_req3_wd;
  logic cs_app_uni_req_uni_req3_we;
  logic cs_app_uni_ack_uni_ack0_qs;
  logic cs_app_uni_ack_uni_ack0_wd;
  logic cs_app_uni_ack_uni_ack0_we;
  logic cs_app_uni_ack_uni_ack1_qs;
  logic cs_app_uni_ack_uni_ack1_wd;
  logic cs_app_uni_ack_uni_ack1_we;
  logic cs_app_uni_ack_uni_ack2_qs;
  logic cs_app_uni_ack_uni_ack2_wd;
  logic cs_app_uni_ack_uni_ack2_we;
  logic cs_app_uni_ack_uni_ack3_qs;
  logic cs_app_uni_ack_uni_ack3_wd;
  logic cs_app_uni_ack_uni_ack3_we;
  logic [1:0] cs_app_uni_sts_uni_sts0_qs;
  logic [1:0] cs_app_uni_sts_uni_sts0_wd;
  logic cs_app_uni_sts_uni_sts0_we;
  logic [1:0] cs_app_uni_sts_uni_sts1_qs;
  logic [1:0] cs_app_uni_sts_uni_sts1_wd;
  logic cs_app_uni_sts_uni_sts1_we;
  logic [1:0] cs_app_uni_sts_uni_sts2_qs;
  logic [1:0] cs_app_uni_sts_uni_sts2_wd;
  logic cs_app_uni_sts_uni_sts2_we;
  logic [1:0] cs_app_uni_sts_uni_sts3_qs;
  logic [1:0] cs_app_uni_sts_uni_sts3_wd;
  logic cs_app_uni_sts_uni_sts3_we;

  // Register instances
  // R[intr_state]: V(False)

  //   F[cs_ins_req_done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_cs_ins_req_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_cs_ins_req_done_we),
    .wd     (intr_state_cs_ins_req_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.cs_ins_req_done.de),
    .d      (hw2reg.intr_state.cs_ins_req_done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.cs_ins_req_done.q ),

    // to register interface (read)
    .qs     (intr_state_cs_ins_req_done_qs)
  );


  //   F[cs_res_req_done]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_cs_res_req_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_cs_res_req_done_we),
    .wd     (intr_state_cs_res_req_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.cs_res_req_done.de),
    .d      (hw2reg.intr_state.cs_res_req_done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.cs_res_req_done.q ),

    // to register interface (read)
    .qs     (intr_state_cs_res_req_done_qs)
  );


  //   F[cs_gen_req_done]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_cs_gen_req_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_cs_gen_req_done_we),
    .wd     (intr_state_cs_gen_req_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.cs_gen_req_done.de),
    .d      (hw2reg.intr_state.cs_gen_req_done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.cs_gen_req_done.q ),

    // to register interface (read)
    .qs     (intr_state_cs_gen_req_done_qs)
  );


  //   F[cs_upd_req_done]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_cs_upd_req_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_cs_upd_req_done_we),
    .wd     (intr_state_cs_upd_req_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.cs_upd_req_done.de),
    .d      (hw2reg.intr_state.cs_upd_req_done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.cs_upd_req_done.q ),

    // to register interface (read)
    .qs     (intr_state_cs_upd_req_done_qs)
  );


  //   F[cs_uni_req_done]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_cs_uni_req_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_cs_uni_req_done_we),
    .wd     (intr_state_cs_uni_req_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.cs_uni_req_done.de),
    .d      (hw2reg.intr_state.cs_uni_req_done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.cs_uni_req_done.q ),

    // to register interface (read)
    .qs     (intr_state_cs_uni_req_done_qs)
  );


  //   F[cs_fifo_err]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_cs_fifo_err (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_cs_fifo_err_we),
    .wd     (intr_state_cs_fifo_err_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.cs_fifo_err.de),
    .d      (hw2reg.intr_state.cs_fifo_err.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.cs_fifo_err.q ),

    // to register interface (read)
    .qs     (intr_state_cs_fifo_err_qs)
  );


  // R[intr_enable]: V(False)

  //   F[cs_ins_req_done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_cs_ins_req_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_cs_ins_req_done_we),
    .wd     (intr_enable_cs_ins_req_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.cs_ins_req_done.q ),

    // to register interface (read)
    .qs     (intr_enable_cs_ins_req_done_qs)
  );


  //   F[cs_res_req_done]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_cs_res_req_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_cs_res_req_done_we),
    .wd     (intr_enable_cs_res_req_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.cs_res_req_done.q ),

    // to register interface (read)
    .qs     (intr_enable_cs_res_req_done_qs)
  );


  //   F[cs_gen_req_done]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_cs_gen_req_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_cs_gen_req_done_we),
    .wd     (intr_enable_cs_gen_req_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.cs_gen_req_done.q ),

    // to register interface (read)
    .qs     (intr_enable_cs_gen_req_done_qs)
  );


  //   F[cs_upd_req_done]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_cs_upd_req_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_cs_upd_req_done_we),
    .wd     (intr_enable_cs_upd_req_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.cs_upd_req_done.q ),

    // to register interface (read)
    .qs     (intr_enable_cs_upd_req_done_qs)
  );


  //   F[cs_uni_req_done]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_cs_uni_req_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_cs_uni_req_done_we),
    .wd     (intr_enable_cs_uni_req_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.cs_uni_req_done.q ),

    // to register interface (read)
    .qs     (intr_enable_cs_uni_req_done_qs)
  );


  //   F[cs_fifo_err]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_cs_fifo_err (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_cs_fifo_err_we),
    .wd     (intr_enable_cs_fifo_err_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.cs_fifo_err.q ),

    // to register interface (read)
    .qs     (intr_enable_cs_fifo_err_qs)
  );


  // R[intr_test]: V(True)

  //   F[cs_ins_req_done]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_cs_ins_req_done (
    .re     (1'b0),
    .we     (intr_test_cs_ins_req_done_we),
    .wd     (intr_test_cs_ins_req_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.cs_ins_req_done.qe),
    .q      (reg2hw.intr_test.cs_ins_req_done.q ),
    .qs     ()
  );


  //   F[cs_res_req_done]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_cs_res_req_done (
    .re     (1'b0),
    .we     (intr_test_cs_res_req_done_we),
    .wd     (intr_test_cs_res_req_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.cs_res_req_done.qe),
    .q      (reg2hw.intr_test.cs_res_req_done.q ),
    .qs     ()
  );


  //   F[cs_gen_req_done]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_cs_gen_req_done (
    .re     (1'b0),
    .we     (intr_test_cs_gen_req_done_we),
    .wd     (intr_test_cs_gen_req_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.cs_gen_req_done.qe),
    .q      (reg2hw.intr_test.cs_gen_req_done.q ),
    .qs     ()
  );


  //   F[cs_upd_req_done]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_cs_upd_req_done (
    .re     (1'b0),
    .we     (intr_test_cs_upd_req_done_we),
    .wd     (intr_test_cs_upd_req_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.cs_upd_req_done.qe),
    .q      (reg2hw.intr_test.cs_upd_req_done.q ),
    .qs     ()
  );


  //   F[cs_uni_req_done]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_cs_uni_req_done (
    .re     (1'b0),
    .we     (intr_test_cs_uni_req_done_we),
    .wd     (intr_test_cs_uni_req_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.cs_uni_req_done.qe),
    .q      (reg2hw.intr_test.cs_uni_req_done.q ),
    .qs     ()
  );


  //   F[cs_fifo_err]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_cs_fifo_err (
    .re     (1'b0),
    .we     (intr_test_cs_fifo_err_we),
    .wd     (intr_test_cs_fifo_err_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.cs_fifo_err.qe),
    .q      (reg2hw.intr_test.cs_fifo_err.q ),
    .qs     ()
  );


  // R[cs_regen]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h1)
  ) u_cs_regen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_regen_we),
    .wd     (cs_regen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_regen.q ),

    // to register interface (read)
    .qs     (cs_regen_qs)
  );


  // R[cs_ctrl]: V(False)

  //   F[cs_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_ctrl_cs_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_ctrl_cs_enable_we),
    .wd     (cs_ctrl_cs_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_ctrl.cs_enable.q ),

    // to register interface (read)
    .qs     (cs_ctrl_cs_enable_qs)
  );


  //   F[fifo_depth_sts_sel]: 19:16
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_cs_ctrl_fifo_depth_sts_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_ctrl_fifo_depth_sts_sel_we),
    .wd     (cs_ctrl_fifo_depth_sts_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_ctrl.fifo_depth_sts_sel.q ),

    // to register interface (read)
    .qs     (cs_ctrl_fifo_depth_sts_sel_qs)
  );


  // R[cs_sum_sts]: V(False)

  //   F[fifo_depth_sts]: 23:0
  prim_subreg #(
    .DW      (24),
    .SWACCESS("RW"),
    .RESVAL  (24'h0)
  ) u_cs_sum_sts_fifo_depth_sts (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_sum_sts_fifo_depth_sts_we),
    .wd     (cs_sum_sts_fifo_depth_sts_wd),

    // from internal hardware
    .de     (hw2reg.cs_sum_sts.fifo_depth_sts.de),
    .d      (hw2reg.cs_sum_sts.fifo_depth_sts.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_sum_sts_fifo_depth_sts_qs)
  );


  //   F[diag]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_sum_sts_diag (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_sum_sts_diag_we),
    .wd     (cs_sum_sts_diag_wd),

    // from internal hardware
    .de     (hw2reg.cs_sum_sts.diag.de),
    .d      (hw2reg.cs_sum_sts.diag.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_sum_sts_diag_qs)
  );



  // Subregister 0 of Multireg cs_app_ins_req
  // R[cs_app_ins_req]: V(False)

  // F[ins_req0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_ins_req_ins_req0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_ins_req_ins_req0_we & cs_regen_qs),
    .wd     (cs_app_ins_req_ins_req0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_ins_req[0].qe),
    .q      (reg2hw.cs_app_ins_req[0].q ),

    .qs     ()
  );


  // F[ins_req1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_ins_req_ins_req1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_ins_req_ins_req1_we & cs_regen_qs),
    .wd     (cs_app_ins_req_ins_req1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_ins_req[1].qe),
    .q      (reg2hw.cs_app_ins_req[1].q ),

    .qs     ()
  );


  // F[ins_req2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_ins_req_ins_req2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_ins_req_ins_req2_we & cs_regen_qs),
    .wd     (cs_app_ins_req_ins_req2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_ins_req[2].qe),
    .q      (reg2hw.cs_app_ins_req[2].q ),

    .qs     ()
  );


  // F[ins_req3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_ins_req_ins_req3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_ins_req_ins_req3_we & cs_regen_qs),
    .wd     (cs_app_ins_req_ins_req3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_ins_req[3].qe),
    .q      (reg2hw.cs_app_ins_req[3].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg cs_app_seed_clr
  // R[cs_app_seed_clr]: V(False)

  // F[app_seed_clr0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_seed_clr_app_seed_clr0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_seed_clr_app_seed_clr0_we & cs_regen_qs),
    .wd     (cs_app_seed_clr_app_seed_clr0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_seed_clr[0].qe),
    .q      (reg2hw.cs_app_seed_clr[0].q ),

    .qs     ()
  );


  // F[app_seed_clr1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_seed_clr_app_seed_clr1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_seed_clr_app_seed_clr1_we & cs_regen_qs),
    .wd     (cs_app_seed_clr_app_seed_clr1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_seed_clr[1].qe),
    .q      (reg2hw.cs_app_seed_clr[1].q ),

    .qs     ()
  );


  // F[app_seed_clr2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_seed_clr_app_seed_clr2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_seed_clr_app_seed_clr2_we & cs_regen_qs),
    .wd     (cs_app_seed_clr_app_seed_clr2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_seed_clr[2].qe),
    .q      (reg2hw.cs_app_seed_clr[2].q ),

    .qs     ()
  );


  // F[app_seed_clr3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_seed_clr_app_seed_clr3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_seed_clr_app_seed_clr3_we & cs_regen_qs),
    .wd     (cs_app_seed_clr_app_seed_clr3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_seed_clr[3].qe),
    .q      (reg2hw.cs_app_seed_clr[3].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg cs_det_mode
  // R[cs_det_mode]: V(False)

  // F[det_mode0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_det_mode_det_mode0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_det_mode_det_mode0_we & cs_regen_qs),
    .wd     (cs_det_mode_det_mode0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_det_mode[0].q ),

    // to register interface (read)
    .qs     (cs_det_mode_det_mode0_qs)
  );


  // F[det_mode1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_det_mode_det_mode1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_det_mode_det_mode1_we & cs_regen_qs),
    .wd     (cs_det_mode_det_mode1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_det_mode[1].q ),

    // to register interface (read)
    .qs     (cs_det_mode_det_mode1_qs)
  );


  // F[det_mode2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_det_mode_det_mode2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_det_mode_det_mode2_we & cs_regen_qs),
    .wd     (cs_det_mode_det_mode2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_det_mode[2].q ),

    // to register interface (read)
    .qs     (cs_det_mode_det_mode2_qs)
  );


  // F[det_mode3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_det_mode_det_mode3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_det_mode_det_mode3_we & cs_regen_qs),
    .wd     (cs_det_mode_det_mode3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_det_mode[3].q ),

    // to register interface (read)
    .qs     (cs_det_mode_det_mode3_qs)
  );




  // Subregister 0 of Multireg cs_app_ins_ack
  // R[cs_app_ins_ack]: V(False)

  // F[ins_ack0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_ins_ack_ins_ack0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_ins_ack_ins_ack0_we),
    .wd     (cs_app_ins_ack_ins_ack0_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_ins_ack[0].de),
    .d      (hw2reg.cs_app_ins_ack[0].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_ins_ack_ins_ack0_qs)
  );


  // F[ins_ack1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_ins_ack_ins_ack1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_ins_ack_ins_ack1_we),
    .wd     (cs_app_ins_ack_ins_ack1_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_ins_ack[1].de),
    .d      (hw2reg.cs_app_ins_ack[1].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_ins_ack_ins_ack1_qs)
  );


  // F[ins_ack2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_ins_ack_ins_ack2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_ins_ack_ins_ack2_we),
    .wd     (cs_app_ins_ack_ins_ack2_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_ins_ack[2].de),
    .d      (hw2reg.cs_app_ins_ack[2].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_ins_ack_ins_ack2_qs)
  );


  // F[ins_ack3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_ins_ack_ins_ack3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_ins_ack_ins_ack3_we),
    .wd     (cs_app_ins_ack_ins_ack3_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_ins_ack[3].de),
    .d      (hw2reg.cs_app_ins_ack[3].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_ins_ack_ins_ack3_qs)
  );




  // Subregister 0 of Multireg cs_app_ins_sts
  // R[cs_app_ins_sts]: V(False)

  // F[ins_sts0]: 1:0
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_ins_sts_ins_sts0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_ins_sts_ins_sts0_we),
    .wd     (cs_app_ins_sts_ins_sts0_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_ins_sts[0].de),
    .d      (hw2reg.cs_app_ins_sts[0].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_ins_sts_ins_sts0_qs)
  );


  // F[ins_sts1]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_ins_sts_ins_sts1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_ins_sts_ins_sts1_we),
    .wd     (cs_app_ins_sts_ins_sts1_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_ins_sts[1].de),
    .d      (hw2reg.cs_app_ins_sts[1].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_ins_sts_ins_sts1_qs)
  );


  // F[ins_sts2]: 5:4
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_ins_sts_ins_sts2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_ins_sts_ins_sts2_we),
    .wd     (cs_app_ins_sts_ins_sts2_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_ins_sts[2].de),
    .d      (hw2reg.cs_app_ins_sts[2].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_ins_sts_ins_sts2_qs)
  );


  // F[ins_sts3]: 7:6
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_ins_sts_ins_sts3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_ins_sts_ins_sts3_we),
    .wd     (cs_app_ins_sts_ins_sts3_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_ins_sts[3].de),
    .d      (hw2reg.cs_app_ins_sts[3].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_ins_sts_ins_sts3_qs)
  );




  // Subregister 0 of Multireg cs_app_seed_fifo_sts
  // R[cs_app_seed_fifo_sts]: V(True)

  // F[app_seed_fifo_sts0]: 1:0
  prim_subreg_ext #(
    .DW    (2)
  ) u_cs_app_seed_fifo_sts_app_seed_fifo_sts0 (
    .re     (cs_app_seed_fifo_sts_app_seed_fifo_sts0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_app_seed_fifo_sts[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cs_app_seed_fifo_sts_app_seed_fifo_sts0_qs)
  );


  // F[app_seed_fifo_sts1]: 3:2
  prim_subreg_ext #(
    .DW    (2)
  ) u_cs_app_seed_fifo_sts_app_seed_fifo_sts1 (
    .re     (cs_app_seed_fifo_sts_app_seed_fifo_sts1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_app_seed_fifo_sts[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cs_app_seed_fifo_sts_app_seed_fifo_sts1_qs)
  );


  // F[app_seed_fifo_sts2]: 5:4
  prim_subreg_ext #(
    .DW    (2)
  ) u_cs_app_seed_fifo_sts_app_seed_fifo_sts2 (
    .re     (cs_app_seed_fifo_sts_app_seed_fifo_sts2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_app_seed_fifo_sts[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cs_app_seed_fifo_sts_app_seed_fifo_sts2_qs)
  );


  // F[app_seed_fifo_sts3]: 7:6
  prim_subreg_ext #(
    .DW    (2)
  ) u_cs_app_seed_fifo_sts_app_seed_fifo_sts3 (
    .re     (cs_app_seed_fifo_sts_app_seed_fifo_sts3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_app_seed_fifo_sts[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cs_app_seed_fifo_sts_app_seed_fifo_sts3_qs)
  );




  // Subregister 0 of Multireg cs_app_ins_seed
  // R[cs_app_ins_seed0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_cs_app_ins_seed0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_ins_seed0_we & cs_regen_qs),
    .wd     (cs_app_ins_seed0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_ins_seed[0].qe),
    .q      (reg2hw.cs_app_ins_seed[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg cs_app_ins_seed
  // R[cs_app_ins_seed1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_cs_app_ins_seed1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_ins_seed1_we & cs_regen_qs),
    .wd     (cs_app_ins_seed1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_ins_seed[1].qe),
    .q      (reg2hw.cs_app_ins_seed[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg cs_app_ins_seed
  // R[cs_app_ins_seed2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_cs_app_ins_seed2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_ins_seed2_we & cs_regen_qs),
    .wd     (cs_app_ins_seed2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_ins_seed[2].qe),
    .q      (reg2hw.cs_app_ins_seed[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg cs_app_ins_seed
  // R[cs_app_ins_seed3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_cs_app_ins_seed3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_ins_seed3_we & cs_regen_qs),
    .wd     (cs_app_ins_seed3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_ins_seed[3].qe),
    .q      (reg2hw.cs_app_ins_seed[3].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg cs_app_res_req
  // R[cs_app_res_req]: V(False)

  // F[res_req0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_res_req_res_req0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_res_req_res_req0_we & cs_regen_qs),
    .wd     (cs_app_res_req_res_req0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_res_req[0].qe),
    .q      (reg2hw.cs_app_res_req[0].q ),

    .qs     ()
  );


  // F[res_req1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_res_req_res_req1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_res_req_res_req1_we & cs_regen_qs),
    .wd     (cs_app_res_req_res_req1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_res_req[1].qe),
    .q      (reg2hw.cs_app_res_req[1].q ),

    .qs     ()
  );


  // F[res_req2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_res_req_res_req2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_res_req_res_req2_we & cs_regen_qs),
    .wd     (cs_app_res_req_res_req2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_res_req[2].qe),
    .q      (reg2hw.cs_app_res_req[2].q ),

    .qs     ()
  );


  // F[res_req3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_res_req_res_req3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_res_req_res_req3_we & cs_regen_qs),
    .wd     (cs_app_res_req_res_req3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_res_req[3].qe),
    .q      (reg2hw.cs_app_res_req[3].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg cs_app_res_ack
  // R[cs_app_res_ack]: V(False)

  // F[res_ack0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_res_ack_res_ack0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_res_ack_res_ack0_we),
    .wd     (cs_app_res_ack_res_ack0_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_res_ack[0].de),
    .d      (hw2reg.cs_app_res_ack[0].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_res_ack_res_ack0_qs)
  );


  // F[res_ack1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_res_ack_res_ack1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_res_ack_res_ack1_we),
    .wd     (cs_app_res_ack_res_ack1_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_res_ack[1].de),
    .d      (hw2reg.cs_app_res_ack[1].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_res_ack_res_ack1_qs)
  );


  // F[res_ack2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_res_ack_res_ack2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_res_ack_res_ack2_we),
    .wd     (cs_app_res_ack_res_ack2_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_res_ack[2].de),
    .d      (hw2reg.cs_app_res_ack[2].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_res_ack_res_ack2_qs)
  );


  // F[res_ack3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_res_ack_res_ack3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_res_ack_res_ack3_we),
    .wd     (cs_app_res_ack_res_ack3_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_res_ack[3].de),
    .d      (hw2reg.cs_app_res_ack[3].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_res_ack_res_ack3_qs)
  );




  // Subregister 0 of Multireg cs_app_res_sts
  // R[cs_app_res_sts]: V(False)

  // F[res_sts0]: 1:0
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_res_sts_res_sts0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_res_sts_res_sts0_we),
    .wd     (cs_app_res_sts_res_sts0_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_res_sts[0].de),
    .d      (hw2reg.cs_app_res_sts[0].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_res_sts_res_sts0_qs)
  );


  // F[res_sts1]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_res_sts_res_sts1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_res_sts_res_sts1_we),
    .wd     (cs_app_res_sts_res_sts1_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_res_sts[1].de),
    .d      (hw2reg.cs_app_res_sts[1].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_res_sts_res_sts1_qs)
  );


  // F[res_sts2]: 5:4
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_res_sts_res_sts2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_res_sts_res_sts2_we),
    .wd     (cs_app_res_sts_res_sts2_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_res_sts[2].de),
    .d      (hw2reg.cs_app_res_sts[2].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_res_sts_res_sts2_qs)
  );


  // F[res_sts3]: 7:6
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_res_sts_res_sts3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_res_sts_res_sts3_we),
    .wd     (cs_app_res_sts_res_sts3_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_res_sts[3].de),
    .d      (hw2reg.cs_app_res_sts[3].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_res_sts_res_sts3_qs)
  );




  // Subregister 0 of Multireg cs_app_gen_req
  // R[cs_app_gen_req]: V(False)

  // F[gen_req0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_gen_req_gen_req0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_gen_req_gen_req0_we & cs_regen_qs),
    .wd     (cs_app_gen_req_gen_req0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_gen_req[0].qe),
    .q      (reg2hw.cs_app_gen_req[0].q ),

    .qs     ()
  );


  // F[gen_req1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_gen_req_gen_req1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_gen_req_gen_req1_we & cs_regen_qs),
    .wd     (cs_app_gen_req_gen_req1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_gen_req[1].qe),
    .q      (reg2hw.cs_app_gen_req[1].q ),

    .qs     ()
  );


  // F[gen_req2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_gen_req_gen_req2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_gen_req_gen_req2_we & cs_regen_qs),
    .wd     (cs_app_gen_req_gen_req2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_gen_req[2].qe),
    .q      (reg2hw.cs_app_gen_req[2].q ),

    .qs     ()
  );


  // F[gen_req3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_gen_req_gen_req3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_gen_req_gen_req3_we & cs_regen_qs),
    .wd     (cs_app_gen_req_gen_req3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_gen_req[3].qe),
    .q      (reg2hw.cs_app_gen_req[3].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg cs_app_rnd_out_clr
  // R[cs_app_rnd_out_clr]: V(False)

  // F[rnd_out_clr0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_rnd_out_clr_rnd_out_clr0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_rnd_out_clr_rnd_out_clr0_we & cs_regen_qs),
    .wd     (cs_app_rnd_out_clr_rnd_out_clr0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_rnd_out_clr[0].qe),
    .q      (reg2hw.cs_app_rnd_out_clr[0].q ),

    .qs     ()
  );


  // F[rnd_out_clr1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_rnd_out_clr_rnd_out_clr1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_rnd_out_clr_rnd_out_clr1_we & cs_regen_qs),
    .wd     (cs_app_rnd_out_clr_rnd_out_clr1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_rnd_out_clr[1].qe),
    .q      (reg2hw.cs_app_rnd_out_clr[1].q ),

    .qs     ()
  );


  // F[rnd_out_clr2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_rnd_out_clr_rnd_out_clr2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_rnd_out_clr_rnd_out_clr2_we & cs_regen_qs),
    .wd     (cs_app_rnd_out_clr_rnd_out_clr2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_rnd_out_clr[2].qe),
    .q      (reg2hw.cs_app_rnd_out_clr[2].q ),

    .qs     ()
  );


  // F[rnd_out_clr3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_rnd_out_clr_rnd_out_clr3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_rnd_out_clr_rnd_out_clr3_we & cs_regen_qs),
    .wd     (cs_app_rnd_out_clr_rnd_out_clr3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_rnd_out_clr[3].qe),
    .q      (reg2hw.cs_app_rnd_out_clr[3].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg cs_app_pre_res
  // R[cs_app_pre_res]: V(False)

  // F[pre_res0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_pre_res_pre_res0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_pre_res_pre_res0_we & cs_regen_qs),
    .wd     (cs_app_pre_res_pre_res0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_app_pre_res[0].q ),

    // to register interface (read)
    .qs     (cs_app_pre_res_pre_res0_qs)
  );


  // F[pre_res1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_pre_res_pre_res1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_pre_res_pre_res1_we & cs_regen_qs),
    .wd     (cs_app_pre_res_pre_res1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_app_pre_res[1].q ),

    // to register interface (read)
    .qs     (cs_app_pre_res_pre_res1_qs)
  );


  // F[pre_res2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_pre_res_pre_res2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_pre_res_pre_res2_we & cs_regen_qs),
    .wd     (cs_app_pre_res_pre_res2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_app_pre_res[2].q ),

    // to register interface (read)
    .qs     (cs_app_pre_res_pre_res2_qs)
  );


  // F[pre_res3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_pre_res_pre_res3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_pre_res_pre_res3_we & cs_regen_qs),
    .wd     (cs_app_pre_res_pre_res3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_app_pre_res[3].q ),

    // to register interface (read)
    .qs     (cs_app_pre_res_pre_res3_qs)
  );




  // Subregister 0 of Multireg cs_app_gen_ack
  // R[cs_app_gen_ack]: V(False)

  // F[gen_ack0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_gen_ack_gen_ack0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_gen_ack_gen_ack0_we),
    .wd     (cs_app_gen_ack_gen_ack0_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_gen_ack[0].de),
    .d      (hw2reg.cs_app_gen_ack[0].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_gen_ack_gen_ack0_qs)
  );


  // F[gen_ack1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_gen_ack_gen_ack1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_gen_ack_gen_ack1_we),
    .wd     (cs_app_gen_ack_gen_ack1_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_gen_ack[1].de),
    .d      (hw2reg.cs_app_gen_ack[1].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_gen_ack_gen_ack1_qs)
  );


  // F[gen_ack2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_gen_ack_gen_ack2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_gen_ack_gen_ack2_we),
    .wd     (cs_app_gen_ack_gen_ack2_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_gen_ack[2].de),
    .d      (hw2reg.cs_app_gen_ack[2].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_gen_ack_gen_ack2_qs)
  );


  // F[gen_ack3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_gen_ack_gen_ack3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_gen_ack_gen_ack3_we),
    .wd     (cs_app_gen_ack_gen_ack3_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_gen_ack[3].de),
    .d      (hw2reg.cs_app_gen_ack[3].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_gen_ack_gen_ack3_qs)
  );




  // Subregister 0 of Multireg cs_app_gen_sts
  // R[cs_app_gen_sts]: V(False)

  // F[gen_sts0]: 1:0
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_gen_sts_gen_sts0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_gen_sts_gen_sts0_we),
    .wd     (cs_app_gen_sts_gen_sts0_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_gen_sts[0].de),
    .d      (hw2reg.cs_app_gen_sts[0].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_gen_sts_gen_sts0_qs)
  );


  // F[gen_sts1]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_gen_sts_gen_sts1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_gen_sts_gen_sts1_we),
    .wd     (cs_app_gen_sts_gen_sts1_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_gen_sts[1].de),
    .d      (hw2reg.cs_app_gen_sts[1].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_gen_sts_gen_sts1_qs)
  );


  // F[gen_sts2]: 5:4
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_gen_sts_gen_sts2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_gen_sts_gen_sts2_we),
    .wd     (cs_app_gen_sts_gen_sts2_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_gen_sts[2].de),
    .d      (hw2reg.cs_app_gen_sts[2].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_gen_sts_gen_sts2_qs)
  );


  // F[gen_sts3]: 7:6
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_gen_sts_gen_sts3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_gen_sts_gen_sts3_we),
    .wd     (cs_app_gen_sts_gen_sts3_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_gen_sts[3].de),
    .d      (hw2reg.cs_app_gen_sts[3].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_gen_sts_gen_sts3_qs)
  );




  // Subregister 0 of Multireg cs_app_gen_rnd_out_vld
  // R[cs_app_gen_rnd_out_vld]: V(True)

  // F[rnd_out_vld0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_cs_app_gen_rnd_out_vld_rnd_out_vld0 (
    .re     (cs_app_gen_rnd_out_vld_rnd_out_vld0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_app_gen_rnd_out_vld[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cs_app_gen_rnd_out_vld_rnd_out_vld0_qs)
  );


  // F[rnd_out_vld1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_cs_app_gen_rnd_out_vld_rnd_out_vld1 (
    .re     (cs_app_gen_rnd_out_vld_rnd_out_vld1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_app_gen_rnd_out_vld[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cs_app_gen_rnd_out_vld_rnd_out_vld1_qs)
  );


  // F[rnd_out_vld2]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_cs_app_gen_rnd_out_vld_rnd_out_vld2 (
    .re     (cs_app_gen_rnd_out_vld_rnd_out_vld2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_app_gen_rnd_out_vld[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cs_app_gen_rnd_out_vld_rnd_out_vld2_qs)
  );


  // F[rnd_out_vld3]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_cs_app_gen_rnd_out_vld_rnd_out_vld3 (
    .re     (cs_app_gen_rnd_out_vld_rnd_out_vld3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_app_gen_rnd_out_vld[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cs_app_gen_rnd_out_vld_rnd_out_vld3_qs)
  );




  // Subregister 0 of Multireg cs_rnd_out_bits
  // R[cs_rnd_out_bits0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_cs_rnd_out_bits0 (
    .re     (cs_rnd_out_bits0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_rnd_out_bits[0].d),
    .qre    (reg2hw.cs_rnd_out_bits[0].re),
    .qe     (),
    .q      (reg2hw.cs_rnd_out_bits[0].q ),
    .qs     (cs_rnd_out_bits0_qs)
  );

  // Subregister 1 of Multireg cs_rnd_out_bits
  // R[cs_rnd_out_bits1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_cs_rnd_out_bits1 (
    .re     (cs_rnd_out_bits1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_rnd_out_bits[1].d),
    .qre    (reg2hw.cs_rnd_out_bits[1].re),
    .qe     (),
    .q      (reg2hw.cs_rnd_out_bits[1].q ),
    .qs     (cs_rnd_out_bits1_qs)
  );

  // Subregister 2 of Multireg cs_rnd_out_bits
  // R[cs_rnd_out_bits2]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_cs_rnd_out_bits2 (
    .re     (cs_rnd_out_bits2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_rnd_out_bits[2].d),
    .qre    (reg2hw.cs_rnd_out_bits[2].re),
    .qe     (),
    .q      (reg2hw.cs_rnd_out_bits[2].q ),
    .qs     (cs_rnd_out_bits2_qs)
  );

  // Subregister 3 of Multireg cs_rnd_out_bits
  // R[cs_rnd_out_bits3]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_cs_rnd_out_bits3 (
    .re     (cs_rnd_out_bits3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_rnd_out_bits[3].d),
    .qre    (reg2hw.cs_rnd_out_bits[3].re),
    .qe     (),
    .q      (reg2hw.cs_rnd_out_bits[3].q ),
    .qs     (cs_rnd_out_bits3_qs)
  );



  // Subregister 0 of Multireg cs_app_upd_req
  // R[cs_app_upd_req]: V(False)

  // F[upd_req0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_upd_req_upd_req0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_upd_req_upd_req0_we & cs_regen_qs),
    .wd     (cs_app_upd_req_upd_req0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_upd_req[0].qe),
    .q      (reg2hw.cs_app_upd_req[0].q ),

    .qs     ()
  );


  // F[upd_req1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_upd_req_upd_req1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_upd_req_upd_req1_we & cs_regen_qs),
    .wd     (cs_app_upd_req_upd_req1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_upd_req[1].qe),
    .q      (reg2hw.cs_app_upd_req[1].q ),

    .qs     ()
  );


  // F[upd_req2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_upd_req_upd_req2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_upd_req_upd_req2_we & cs_regen_qs),
    .wd     (cs_app_upd_req_upd_req2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_upd_req[2].qe),
    .q      (reg2hw.cs_app_upd_req[2].q ),

    .qs     ()
  );


  // F[upd_req3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_upd_req_upd_req3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_upd_req_upd_req3_we & cs_regen_qs),
    .wd     (cs_app_upd_req_upd_req3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_upd_req[3].qe),
    .q      (reg2hw.cs_app_upd_req[3].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg cs_add_data_clr
  // R[cs_add_data_clr]: V(False)

  // F[add_data_clr0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_add_data_clr_add_data_clr0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_add_data_clr_add_data_clr0_we & cs_regen_qs),
    .wd     (cs_add_data_clr_add_data_clr0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_add_data_clr[0].qe),
    .q      (reg2hw.cs_add_data_clr[0].q ),

    .qs     ()
  );


  // F[add_data_clr1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_add_data_clr_add_data_clr1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_add_data_clr_add_data_clr1_we & cs_regen_qs),
    .wd     (cs_add_data_clr_add_data_clr1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_add_data_clr[1].qe),
    .q      (reg2hw.cs_add_data_clr[1].q ),

    .qs     ()
  );


  // F[add_data_clr2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_add_data_clr_add_data_clr2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_add_data_clr_add_data_clr2_we & cs_regen_qs),
    .wd     (cs_add_data_clr_add_data_clr2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_add_data_clr[2].qe),
    .q      (reg2hw.cs_add_data_clr[2].q ),

    .qs     ()
  );


  // F[add_data_clr3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_add_data_clr_add_data_clr3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_add_data_clr_add_data_clr3_we & cs_regen_qs),
    .wd     (cs_add_data_clr_add_data_clr3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_add_data_clr[3].qe),
    .q      (reg2hw.cs_add_data_clr[3].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg cs_app_upd_ack
  // R[cs_app_upd_ack]: V(False)

  // F[upd_ack0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_upd_ack_upd_ack0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_upd_ack_upd_ack0_we),
    .wd     (cs_app_upd_ack_upd_ack0_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_upd_ack[0].de),
    .d      (hw2reg.cs_app_upd_ack[0].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_upd_ack_upd_ack0_qs)
  );


  // F[upd_ack1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_upd_ack_upd_ack1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_upd_ack_upd_ack1_we),
    .wd     (cs_app_upd_ack_upd_ack1_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_upd_ack[1].de),
    .d      (hw2reg.cs_app_upd_ack[1].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_upd_ack_upd_ack1_qs)
  );


  // F[upd_ack2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_upd_ack_upd_ack2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_upd_ack_upd_ack2_we),
    .wd     (cs_app_upd_ack_upd_ack2_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_upd_ack[2].de),
    .d      (hw2reg.cs_app_upd_ack[2].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_upd_ack_upd_ack2_qs)
  );


  // F[upd_ack3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_upd_ack_upd_ack3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_upd_ack_upd_ack3_we),
    .wd     (cs_app_upd_ack_upd_ack3_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_upd_ack[3].de),
    .d      (hw2reg.cs_app_upd_ack[3].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_upd_ack_upd_ack3_qs)
  );




  // Subregister 0 of Multireg cs_app_upd_sts
  // R[cs_app_upd_sts]: V(False)

  // F[upd_sts0]: 1:0
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_upd_sts_upd_sts0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_upd_sts_upd_sts0_we),
    .wd     (cs_app_upd_sts_upd_sts0_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_upd_sts[0].de),
    .d      (hw2reg.cs_app_upd_sts[0].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_upd_sts_upd_sts0_qs)
  );


  // F[upd_sts1]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_upd_sts_upd_sts1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_upd_sts_upd_sts1_we),
    .wd     (cs_app_upd_sts_upd_sts1_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_upd_sts[1].de),
    .d      (hw2reg.cs_app_upd_sts[1].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_upd_sts_upd_sts1_qs)
  );


  // F[upd_sts2]: 5:4
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_upd_sts_upd_sts2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_upd_sts_upd_sts2_we),
    .wd     (cs_app_upd_sts_upd_sts2_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_upd_sts[2].de),
    .d      (hw2reg.cs_app_upd_sts[2].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_upd_sts_upd_sts2_qs)
  );


  // F[upd_sts3]: 7:6
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_upd_sts_upd_sts3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_upd_sts_upd_sts3_we),
    .wd     (cs_app_upd_sts_upd_sts3_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_upd_sts[3].de),
    .d      (hw2reg.cs_app_upd_sts[3].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_upd_sts_upd_sts3_qs)
  );




  // Subregister 0 of Multireg cs_add_data_fifo_sts
  // R[cs_add_data_fifo_sts]: V(True)

  // F[add_data_fifo_sts0]: 1:0
  prim_subreg_ext #(
    .DW    (2)
  ) u_cs_add_data_fifo_sts_add_data_fifo_sts0 (
    .re     (cs_add_data_fifo_sts_add_data_fifo_sts0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_add_data_fifo_sts[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cs_add_data_fifo_sts_add_data_fifo_sts0_qs)
  );


  // F[add_data_fifo_sts1]: 3:2
  prim_subreg_ext #(
    .DW    (2)
  ) u_cs_add_data_fifo_sts_add_data_fifo_sts1 (
    .re     (cs_add_data_fifo_sts_add_data_fifo_sts1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_add_data_fifo_sts[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cs_add_data_fifo_sts_add_data_fifo_sts1_qs)
  );


  // F[add_data_fifo_sts2]: 5:4
  prim_subreg_ext #(
    .DW    (2)
  ) u_cs_add_data_fifo_sts_add_data_fifo_sts2 (
    .re     (cs_add_data_fifo_sts_add_data_fifo_sts2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_add_data_fifo_sts[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cs_add_data_fifo_sts_add_data_fifo_sts2_qs)
  );


  // F[add_data_fifo_sts3]: 7:6
  prim_subreg_ext #(
    .DW    (2)
  ) u_cs_add_data_fifo_sts_add_data_fifo_sts3 (
    .re     (cs_add_data_fifo_sts_add_data_fifo_sts3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_add_data_fifo_sts[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cs_add_data_fifo_sts_add_data_fifo_sts3_qs)
  );




  // Subregister 0 of Multireg cs_add_data_in
  // R[cs_add_data_in0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_cs_add_data_in0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_add_data_in0_we & cs_regen_qs),
    .wd     (cs_add_data_in0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_add_data_in[0].qe),
    .q      (reg2hw.cs_add_data_in[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg cs_add_data_in
  // R[cs_add_data_in1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_cs_add_data_in1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_add_data_in1_we & cs_regen_qs),
    .wd     (cs_add_data_in1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_add_data_in[1].qe),
    .q      (reg2hw.cs_add_data_in[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg cs_add_data_in
  // R[cs_add_data_in2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_cs_add_data_in2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_add_data_in2_we & cs_regen_qs),
    .wd     (cs_add_data_in2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_add_data_in[2].qe),
    .q      (reg2hw.cs_add_data_in[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg cs_add_data_in
  // R[cs_add_data_in3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_cs_add_data_in3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_add_data_in3_we & cs_regen_qs),
    .wd     (cs_add_data_in3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_add_data_in[3].qe),
    .q      (reg2hw.cs_add_data_in[3].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg cs_app_uni_req
  // R[cs_app_uni_req]: V(False)

  // F[uni_req0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_uni_req_uni_req0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_uni_req_uni_req0_we & cs_regen_qs),
    .wd     (cs_app_uni_req_uni_req0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_uni_req[0].qe),
    .q      (reg2hw.cs_app_uni_req[0].q ),

    .qs     ()
  );


  // F[uni_req1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_uni_req_uni_req1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_uni_req_uni_req1_we & cs_regen_qs),
    .wd     (cs_app_uni_req_uni_req1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_uni_req[1].qe),
    .q      (reg2hw.cs_app_uni_req[1].q ),

    .qs     ()
  );


  // F[uni_req2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_uni_req_uni_req2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_uni_req_uni_req2_we & cs_regen_qs),
    .wd     (cs_app_uni_req_uni_req2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_uni_req[2].qe),
    .q      (reg2hw.cs_app_uni_req[2].q ),

    .qs     ()
  );


  // F[uni_req3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_cs_app_uni_req_uni_req3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_app_uni_req_uni_req3_we & cs_regen_qs),
    .wd     (cs_app_uni_req_uni_req3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_app_uni_req[3].qe),
    .q      (reg2hw.cs_app_uni_req[3].q ),

    .qs     ()
  );




  // Subregister 0 of Multireg cs_app_uni_ack
  // R[cs_app_uni_ack]: V(False)

  // F[uni_ack0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_uni_ack_uni_ack0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_uni_ack_uni_ack0_we),
    .wd     (cs_app_uni_ack_uni_ack0_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_uni_ack[0].de),
    .d      (hw2reg.cs_app_uni_ack[0].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_uni_ack_uni_ack0_qs)
  );


  // F[uni_ack1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_uni_ack_uni_ack1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_uni_ack_uni_ack1_we),
    .wd     (cs_app_uni_ack_uni_ack1_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_uni_ack[1].de),
    .d      (hw2reg.cs_app_uni_ack[1].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_uni_ack_uni_ack1_qs)
  );


  // F[uni_ack2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_uni_ack_uni_ack2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_uni_ack_uni_ack2_we),
    .wd     (cs_app_uni_ack_uni_ack2_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_uni_ack[2].de),
    .d      (hw2reg.cs_app_uni_ack[2].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_uni_ack_uni_ack2_qs)
  );


  // F[uni_ack3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_app_uni_ack_uni_ack3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_uni_ack_uni_ack3_we),
    .wd     (cs_app_uni_ack_uni_ack3_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_uni_ack[3].de),
    .d      (hw2reg.cs_app_uni_ack[3].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_uni_ack_uni_ack3_qs)
  );




  // Subregister 0 of Multireg cs_app_uni_sts
  // R[cs_app_uni_sts]: V(False)

  // F[uni_sts0]: 1:0
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_uni_sts_uni_sts0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_uni_sts_uni_sts0_we),
    .wd     (cs_app_uni_sts_uni_sts0_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_uni_sts[0].de),
    .d      (hw2reg.cs_app_uni_sts[0].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_uni_sts_uni_sts0_qs)
  );


  // F[uni_sts1]: 3:2
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_uni_sts_uni_sts1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_uni_sts_uni_sts1_we),
    .wd     (cs_app_uni_sts_uni_sts1_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_uni_sts[1].de),
    .d      (hw2reg.cs_app_uni_sts[1].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_uni_sts_uni_sts1_qs)
  );


  // F[uni_sts2]: 5:4
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_uni_sts_uni_sts2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_uni_sts_uni_sts2_we),
    .wd     (cs_app_uni_sts_uni_sts2_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_uni_sts[2].de),
    .d      (hw2reg.cs_app_uni_sts[2].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_uni_sts_uni_sts2_qs)
  );


  // F[uni_sts3]: 7:6
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_app_uni_sts_uni_sts3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_app_uni_sts_uni_sts3_we),
    .wd     (cs_app_uni_sts_uni_sts3_wd),

    // from internal hardware
    .de     (hw2reg.cs_app_uni_sts[3].de),
    .d      (hw2reg.cs_app_uni_sts[3].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_app_uni_sts_uni_sts3_qs)
  );





  logic [40:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == CSRNG_INTR_STATE_OFFSET);
    addr_hit[ 1] = (reg_addr == CSRNG_INTR_ENABLE_OFFSET);
    addr_hit[ 2] = (reg_addr == CSRNG_INTR_TEST_OFFSET);
    addr_hit[ 3] = (reg_addr == CSRNG_CS_REGEN_OFFSET);
    addr_hit[ 4] = (reg_addr == CSRNG_CS_CTRL_OFFSET);
    addr_hit[ 5] = (reg_addr == CSRNG_CS_SUM_STS_OFFSET);
    addr_hit[ 6] = (reg_addr == CSRNG_CS_APP_INS_REQ_OFFSET);
    addr_hit[ 7] = (reg_addr == CSRNG_CS_APP_SEED_CLR_OFFSET);
    addr_hit[ 8] = (reg_addr == CSRNG_CS_DET_MODE_OFFSET);
    addr_hit[ 9] = (reg_addr == CSRNG_CS_APP_INS_ACK_OFFSET);
    addr_hit[10] = (reg_addr == CSRNG_CS_APP_INS_STS_OFFSET);
    addr_hit[11] = (reg_addr == CSRNG_CS_APP_SEED_FIFO_STS_OFFSET);
    addr_hit[12] = (reg_addr == CSRNG_CS_APP_INS_SEED0_OFFSET);
    addr_hit[13] = (reg_addr == CSRNG_CS_APP_INS_SEED1_OFFSET);
    addr_hit[14] = (reg_addr == CSRNG_CS_APP_INS_SEED2_OFFSET);
    addr_hit[15] = (reg_addr == CSRNG_CS_APP_INS_SEED3_OFFSET);
    addr_hit[16] = (reg_addr == CSRNG_CS_APP_RES_REQ_OFFSET);
    addr_hit[17] = (reg_addr == CSRNG_CS_APP_RES_ACK_OFFSET);
    addr_hit[18] = (reg_addr == CSRNG_CS_APP_RES_STS_OFFSET);
    addr_hit[19] = (reg_addr == CSRNG_CS_APP_GEN_REQ_OFFSET);
    addr_hit[20] = (reg_addr == CSRNG_CS_APP_RND_OUT_CLR_OFFSET);
    addr_hit[21] = (reg_addr == CSRNG_CS_APP_PRE_RES_OFFSET);
    addr_hit[22] = (reg_addr == CSRNG_CS_APP_GEN_ACK_OFFSET);
    addr_hit[23] = (reg_addr == CSRNG_CS_APP_GEN_STS_OFFSET);
    addr_hit[24] = (reg_addr == CSRNG_CS_APP_GEN_RND_OUT_VLD_OFFSET);
    addr_hit[25] = (reg_addr == CSRNG_CS_RND_OUT_BITS0_OFFSET);
    addr_hit[26] = (reg_addr == CSRNG_CS_RND_OUT_BITS1_OFFSET);
    addr_hit[27] = (reg_addr == CSRNG_CS_RND_OUT_BITS2_OFFSET);
    addr_hit[28] = (reg_addr == CSRNG_CS_RND_OUT_BITS3_OFFSET);
    addr_hit[29] = (reg_addr == CSRNG_CS_APP_UPD_REQ_OFFSET);
    addr_hit[30] = (reg_addr == CSRNG_CS_ADD_DATA_CLR_OFFSET);
    addr_hit[31] = (reg_addr == CSRNG_CS_APP_UPD_ACK_OFFSET);
    addr_hit[32] = (reg_addr == CSRNG_CS_APP_UPD_STS_OFFSET);
    addr_hit[33] = (reg_addr == CSRNG_CS_ADD_DATA_FIFO_STS_OFFSET);
    addr_hit[34] = (reg_addr == CSRNG_CS_ADD_DATA_IN0_OFFSET);
    addr_hit[35] = (reg_addr == CSRNG_CS_ADD_DATA_IN1_OFFSET);
    addr_hit[36] = (reg_addr == CSRNG_CS_ADD_DATA_IN2_OFFSET);
    addr_hit[37] = (reg_addr == CSRNG_CS_ADD_DATA_IN3_OFFSET);
    addr_hit[38] = (reg_addr == CSRNG_CS_APP_UNI_REQ_OFFSET);
    addr_hit[39] = (reg_addr == CSRNG_CS_APP_UNI_ACK_OFFSET);
    addr_hit[40] = (reg_addr == CSRNG_CS_APP_UNI_STS_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[ 0] && reg_we && (CSRNG_PERMIT[ 0] != (CSRNG_PERMIT[ 0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 1] && reg_we && (CSRNG_PERMIT[ 1] != (CSRNG_PERMIT[ 1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 2] && reg_we && (CSRNG_PERMIT[ 2] != (CSRNG_PERMIT[ 2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 3] && reg_we && (CSRNG_PERMIT[ 3] != (CSRNG_PERMIT[ 3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 4] && reg_we && (CSRNG_PERMIT[ 4] != (CSRNG_PERMIT[ 4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 5] && reg_we && (CSRNG_PERMIT[ 5] != (CSRNG_PERMIT[ 5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 6] && reg_we && (CSRNG_PERMIT[ 6] != (CSRNG_PERMIT[ 6] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 7] && reg_we && (CSRNG_PERMIT[ 7] != (CSRNG_PERMIT[ 7] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 8] && reg_we && (CSRNG_PERMIT[ 8] != (CSRNG_PERMIT[ 8] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 9] && reg_we && (CSRNG_PERMIT[ 9] != (CSRNG_PERMIT[ 9] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[10] && reg_we && (CSRNG_PERMIT[10] != (CSRNG_PERMIT[10] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[11] && reg_we && (CSRNG_PERMIT[11] != (CSRNG_PERMIT[11] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[12] && reg_we && (CSRNG_PERMIT[12] != (CSRNG_PERMIT[12] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[13] && reg_we && (CSRNG_PERMIT[13] != (CSRNG_PERMIT[13] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[14] && reg_we && (CSRNG_PERMIT[14] != (CSRNG_PERMIT[14] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[15] && reg_we && (CSRNG_PERMIT[15] != (CSRNG_PERMIT[15] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[16] && reg_we && (CSRNG_PERMIT[16] != (CSRNG_PERMIT[16] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[17] && reg_we && (CSRNG_PERMIT[17] != (CSRNG_PERMIT[17] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[18] && reg_we && (CSRNG_PERMIT[18] != (CSRNG_PERMIT[18] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[19] && reg_we && (CSRNG_PERMIT[19] != (CSRNG_PERMIT[19] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[20] && reg_we && (CSRNG_PERMIT[20] != (CSRNG_PERMIT[20] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[21] && reg_we && (CSRNG_PERMIT[21] != (CSRNG_PERMIT[21] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[22] && reg_we && (CSRNG_PERMIT[22] != (CSRNG_PERMIT[22] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[23] && reg_we && (CSRNG_PERMIT[23] != (CSRNG_PERMIT[23] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[24] && reg_we && (CSRNG_PERMIT[24] != (CSRNG_PERMIT[24] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[25] && reg_we && (CSRNG_PERMIT[25] != (CSRNG_PERMIT[25] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[26] && reg_we && (CSRNG_PERMIT[26] != (CSRNG_PERMIT[26] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[27] && reg_we && (CSRNG_PERMIT[27] != (CSRNG_PERMIT[27] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[28] && reg_we && (CSRNG_PERMIT[28] != (CSRNG_PERMIT[28] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[29] && reg_we && (CSRNG_PERMIT[29] != (CSRNG_PERMIT[29] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[30] && reg_we && (CSRNG_PERMIT[30] != (CSRNG_PERMIT[30] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[31] && reg_we && (CSRNG_PERMIT[31] != (CSRNG_PERMIT[31] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[32] && reg_we && (CSRNG_PERMIT[32] != (CSRNG_PERMIT[32] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[33] && reg_we && (CSRNG_PERMIT[33] != (CSRNG_PERMIT[33] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[34] && reg_we && (CSRNG_PERMIT[34] != (CSRNG_PERMIT[34] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[35] && reg_we && (CSRNG_PERMIT[35] != (CSRNG_PERMIT[35] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[36] && reg_we && (CSRNG_PERMIT[36] != (CSRNG_PERMIT[36] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[37] && reg_we && (CSRNG_PERMIT[37] != (CSRNG_PERMIT[37] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[38] && reg_we && (CSRNG_PERMIT[38] != (CSRNG_PERMIT[38] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[39] && reg_we && (CSRNG_PERMIT[39] != (CSRNG_PERMIT[39] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[40] && reg_we && (CSRNG_PERMIT[40] != (CSRNG_PERMIT[40] & reg_be))) wr_err = 1'b1 ;
  end

  assign intr_state_cs_ins_req_done_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_cs_ins_req_done_wd = reg_wdata[0];

  assign intr_state_cs_res_req_done_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_cs_res_req_done_wd = reg_wdata[1];

  assign intr_state_cs_gen_req_done_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_cs_gen_req_done_wd = reg_wdata[2];

  assign intr_state_cs_upd_req_done_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_cs_upd_req_done_wd = reg_wdata[3];

  assign intr_state_cs_uni_req_done_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_cs_uni_req_done_wd = reg_wdata[4];

  assign intr_state_cs_fifo_err_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_cs_fifo_err_wd = reg_wdata[5];

  assign intr_enable_cs_ins_req_done_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_cs_ins_req_done_wd = reg_wdata[0];

  assign intr_enable_cs_res_req_done_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_cs_res_req_done_wd = reg_wdata[1];

  assign intr_enable_cs_gen_req_done_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_cs_gen_req_done_wd = reg_wdata[2];

  assign intr_enable_cs_upd_req_done_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_cs_upd_req_done_wd = reg_wdata[3];

  assign intr_enable_cs_uni_req_done_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_cs_uni_req_done_wd = reg_wdata[4];

  assign intr_enable_cs_fifo_err_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_cs_fifo_err_wd = reg_wdata[5];

  assign intr_test_cs_ins_req_done_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_cs_ins_req_done_wd = reg_wdata[0];

  assign intr_test_cs_res_req_done_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_cs_res_req_done_wd = reg_wdata[1];

  assign intr_test_cs_gen_req_done_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_cs_gen_req_done_wd = reg_wdata[2];

  assign intr_test_cs_upd_req_done_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_cs_upd_req_done_wd = reg_wdata[3];

  assign intr_test_cs_uni_req_done_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_cs_uni_req_done_wd = reg_wdata[4];

  assign intr_test_cs_fifo_err_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_cs_fifo_err_wd = reg_wdata[5];

  assign cs_regen_we = addr_hit[3] & reg_we & ~wr_err;
  assign cs_regen_wd = reg_wdata[0];

  assign cs_ctrl_cs_enable_we = addr_hit[4] & reg_we & ~wr_err;
  assign cs_ctrl_cs_enable_wd = reg_wdata[0];

  assign cs_ctrl_fifo_depth_sts_sel_we = addr_hit[4] & reg_we & ~wr_err;
  assign cs_ctrl_fifo_depth_sts_sel_wd = reg_wdata[19:16];

  assign cs_sum_sts_fifo_depth_sts_we = addr_hit[5] & reg_we & ~wr_err;
  assign cs_sum_sts_fifo_depth_sts_wd = reg_wdata[23:0];

  assign cs_sum_sts_diag_we = addr_hit[5] & reg_we & ~wr_err;
  assign cs_sum_sts_diag_wd = reg_wdata[31];

  assign cs_app_ins_req_ins_req0_we = addr_hit[6] & reg_we & ~wr_err;
  assign cs_app_ins_req_ins_req0_wd = reg_wdata[0];

  assign cs_app_ins_req_ins_req1_we = addr_hit[6] & reg_we & ~wr_err;
  assign cs_app_ins_req_ins_req1_wd = reg_wdata[1];

  assign cs_app_ins_req_ins_req2_we = addr_hit[6] & reg_we & ~wr_err;
  assign cs_app_ins_req_ins_req2_wd = reg_wdata[2];

  assign cs_app_ins_req_ins_req3_we = addr_hit[6] & reg_we & ~wr_err;
  assign cs_app_ins_req_ins_req3_wd = reg_wdata[3];

  assign cs_app_seed_clr_app_seed_clr0_we = addr_hit[7] & reg_we & ~wr_err;
  assign cs_app_seed_clr_app_seed_clr0_wd = reg_wdata[0];

  assign cs_app_seed_clr_app_seed_clr1_we = addr_hit[7] & reg_we & ~wr_err;
  assign cs_app_seed_clr_app_seed_clr1_wd = reg_wdata[1];

  assign cs_app_seed_clr_app_seed_clr2_we = addr_hit[7] & reg_we & ~wr_err;
  assign cs_app_seed_clr_app_seed_clr2_wd = reg_wdata[2];

  assign cs_app_seed_clr_app_seed_clr3_we = addr_hit[7] & reg_we & ~wr_err;
  assign cs_app_seed_clr_app_seed_clr3_wd = reg_wdata[3];

  assign cs_det_mode_det_mode0_we = addr_hit[8] & reg_we & ~wr_err;
  assign cs_det_mode_det_mode0_wd = reg_wdata[0];

  assign cs_det_mode_det_mode1_we = addr_hit[8] & reg_we & ~wr_err;
  assign cs_det_mode_det_mode1_wd = reg_wdata[1];

  assign cs_det_mode_det_mode2_we = addr_hit[8] & reg_we & ~wr_err;
  assign cs_det_mode_det_mode2_wd = reg_wdata[2];

  assign cs_det_mode_det_mode3_we = addr_hit[8] & reg_we & ~wr_err;
  assign cs_det_mode_det_mode3_wd = reg_wdata[3];

  assign cs_app_ins_ack_ins_ack0_we = addr_hit[9] & reg_we & ~wr_err;
  assign cs_app_ins_ack_ins_ack0_wd = reg_wdata[0];

  assign cs_app_ins_ack_ins_ack1_we = addr_hit[9] & reg_we & ~wr_err;
  assign cs_app_ins_ack_ins_ack1_wd = reg_wdata[1];

  assign cs_app_ins_ack_ins_ack2_we = addr_hit[9] & reg_we & ~wr_err;
  assign cs_app_ins_ack_ins_ack2_wd = reg_wdata[2];

  assign cs_app_ins_ack_ins_ack3_we = addr_hit[9] & reg_we & ~wr_err;
  assign cs_app_ins_ack_ins_ack3_wd = reg_wdata[3];

  assign cs_app_ins_sts_ins_sts0_we = addr_hit[10] & reg_we & ~wr_err;
  assign cs_app_ins_sts_ins_sts0_wd = reg_wdata[1:0];

  assign cs_app_ins_sts_ins_sts1_we = addr_hit[10] & reg_we & ~wr_err;
  assign cs_app_ins_sts_ins_sts1_wd = reg_wdata[3:2];

  assign cs_app_ins_sts_ins_sts2_we = addr_hit[10] & reg_we & ~wr_err;
  assign cs_app_ins_sts_ins_sts2_wd = reg_wdata[5:4];

  assign cs_app_ins_sts_ins_sts3_we = addr_hit[10] & reg_we & ~wr_err;
  assign cs_app_ins_sts_ins_sts3_wd = reg_wdata[7:6];

  assign cs_app_seed_fifo_sts_app_seed_fifo_sts0_re = addr_hit[11] && reg_re;

  assign cs_app_seed_fifo_sts_app_seed_fifo_sts1_re = addr_hit[11] && reg_re;

  assign cs_app_seed_fifo_sts_app_seed_fifo_sts2_re = addr_hit[11] && reg_re;

  assign cs_app_seed_fifo_sts_app_seed_fifo_sts3_re = addr_hit[11] && reg_re;

  assign cs_app_ins_seed0_we = addr_hit[12] & reg_we & ~wr_err;
  assign cs_app_ins_seed0_wd = reg_wdata[31:0];

  assign cs_app_ins_seed1_we = addr_hit[13] & reg_we & ~wr_err;
  assign cs_app_ins_seed1_wd = reg_wdata[31:0];

  assign cs_app_ins_seed2_we = addr_hit[14] & reg_we & ~wr_err;
  assign cs_app_ins_seed2_wd = reg_wdata[31:0];

  assign cs_app_ins_seed3_we = addr_hit[15] & reg_we & ~wr_err;
  assign cs_app_ins_seed3_wd = reg_wdata[31:0];

  assign cs_app_res_req_res_req0_we = addr_hit[16] & reg_we & ~wr_err;
  assign cs_app_res_req_res_req0_wd = reg_wdata[0];

  assign cs_app_res_req_res_req1_we = addr_hit[16] & reg_we & ~wr_err;
  assign cs_app_res_req_res_req1_wd = reg_wdata[1];

  assign cs_app_res_req_res_req2_we = addr_hit[16] & reg_we & ~wr_err;
  assign cs_app_res_req_res_req2_wd = reg_wdata[2];

  assign cs_app_res_req_res_req3_we = addr_hit[16] & reg_we & ~wr_err;
  assign cs_app_res_req_res_req3_wd = reg_wdata[3];

  assign cs_app_res_ack_res_ack0_we = addr_hit[17] & reg_we & ~wr_err;
  assign cs_app_res_ack_res_ack0_wd = reg_wdata[0];

  assign cs_app_res_ack_res_ack1_we = addr_hit[17] & reg_we & ~wr_err;
  assign cs_app_res_ack_res_ack1_wd = reg_wdata[1];

  assign cs_app_res_ack_res_ack2_we = addr_hit[17] & reg_we & ~wr_err;
  assign cs_app_res_ack_res_ack2_wd = reg_wdata[2];

  assign cs_app_res_ack_res_ack3_we = addr_hit[17] & reg_we & ~wr_err;
  assign cs_app_res_ack_res_ack3_wd = reg_wdata[3];

  assign cs_app_res_sts_res_sts0_we = addr_hit[18] & reg_we & ~wr_err;
  assign cs_app_res_sts_res_sts0_wd = reg_wdata[1:0];

  assign cs_app_res_sts_res_sts1_we = addr_hit[18] & reg_we & ~wr_err;
  assign cs_app_res_sts_res_sts1_wd = reg_wdata[3:2];

  assign cs_app_res_sts_res_sts2_we = addr_hit[18] & reg_we & ~wr_err;
  assign cs_app_res_sts_res_sts2_wd = reg_wdata[5:4];

  assign cs_app_res_sts_res_sts3_we = addr_hit[18] & reg_we & ~wr_err;
  assign cs_app_res_sts_res_sts3_wd = reg_wdata[7:6];

  assign cs_app_gen_req_gen_req0_we = addr_hit[19] & reg_we & ~wr_err;
  assign cs_app_gen_req_gen_req0_wd = reg_wdata[0];

  assign cs_app_gen_req_gen_req1_we = addr_hit[19] & reg_we & ~wr_err;
  assign cs_app_gen_req_gen_req1_wd = reg_wdata[1];

  assign cs_app_gen_req_gen_req2_we = addr_hit[19] & reg_we & ~wr_err;
  assign cs_app_gen_req_gen_req2_wd = reg_wdata[2];

  assign cs_app_gen_req_gen_req3_we = addr_hit[19] & reg_we & ~wr_err;
  assign cs_app_gen_req_gen_req3_wd = reg_wdata[3];

  assign cs_app_rnd_out_clr_rnd_out_clr0_we = addr_hit[20] & reg_we & ~wr_err;
  assign cs_app_rnd_out_clr_rnd_out_clr0_wd = reg_wdata[0];

  assign cs_app_rnd_out_clr_rnd_out_clr1_we = addr_hit[20] & reg_we & ~wr_err;
  assign cs_app_rnd_out_clr_rnd_out_clr1_wd = reg_wdata[1];

  assign cs_app_rnd_out_clr_rnd_out_clr2_we = addr_hit[20] & reg_we & ~wr_err;
  assign cs_app_rnd_out_clr_rnd_out_clr2_wd = reg_wdata[2];

  assign cs_app_rnd_out_clr_rnd_out_clr3_we = addr_hit[20] & reg_we & ~wr_err;
  assign cs_app_rnd_out_clr_rnd_out_clr3_wd = reg_wdata[3];

  assign cs_app_pre_res_pre_res0_we = addr_hit[21] & reg_we & ~wr_err;
  assign cs_app_pre_res_pre_res0_wd = reg_wdata[0];

  assign cs_app_pre_res_pre_res1_we = addr_hit[21] & reg_we & ~wr_err;
  assign cs_app_pre_res_pre_res1_wd = reg_wdata[1];

  assign cs_app_pre_res_pre_res2_we = addr_hit[21] & reg_we & ~wr_err;
  assign cs_app_pre_res_pre_res2_wd = reg_wdata[2];

  assign cs_app_pre_res_pre_res3_we = addr_hit[21] & reg_we & ~wr_err;
  assign cs_app_pre_res_pre_res3_wd = reg_wdata[3];

  assign cs_app_gen_ack_gen_ack0_we = addr_hit[22] & reg_we & ~wr_err;
  assign cs_app_gen_ack_gen_ack0_wd = reg_wdata[0];

  assign cs_app_gen_ack_gen_ack1_we = addr_hit[22] & reg_we & ~wr_err;
  assign cs_app_gen_ack_gen_ack1_wd = reg_wdata[1];

  assign cs_app_gen_ack_gen_ack2_we = addr_hit[22] & reg_we & ~wr_err;
  assign cs_app_gen_ack_gen_ack2_wd = reg_wdata[2];

  assign cs_app_gen_ack_gen_ack3_we = addr_hit[22] & reg_we & ~wr_err;
  assign cs_app_gen_ack_gen_ack3_wd = reg_wdata[3];

  assign cs_app_gen_sts_gen_sts0_we = addr_hit[23] & reg_we & ~wr_err;
  assign cs_app_gen_sts_gen_sts0_wd = reg_wdata[1:0];

  assign cs_app_gen_sts_gen_sts1_we = addr_hit[23] & reg_we & ~wr_err;
  assign cs_app_gen_sts_gen_sts1_wd = reg_wdata[3:2];

  assign cs_app_gen_sts_gen_sts2_we = addr_hit[23] & reg_we & ~wr_err;
  assign cs_app_gen_sts_gen_sts2_wd = reg_wdata[5:4];

  assign cs_app_gen_sts_gen_sts3_we = addr_hit[23] & reg_we & ~wr_err;
  assign cs_app_gen_sts_gen_sts3_wd = reg_wdata[7:6];

  assign cs_app_gen_rnd_out_vld_rnd_out_vld0_re = addr_hit[24] && reg_re;

  assign cs_app_gen_rnd_out_vld_rnd_out_vld1_re = addr_hit[24] && reg_re;

  assign cs_app_gen_rnd_out_vld_rnd_out_vld2_re = addr_hit[24] && reg_re;

  assign cs_app_gen_rnd_out_vld_rnd_out_vld3_re = addr_hit[24] && reg_re;

  assign cs_rnd_out_bits0_re = addr_hit[25] && reg_re;

  assign cs_rnd_out_bits1_re = addr_hit[26] && reg_re;

  assign cs_rnd_out_bits2_re = addr_hit[27] && reg_re;

  assign cs_rnd_out_bits3_re = addr_hit[28] && reg_re;

  assign cs_app_upd_req_upd_req0_we = addr_hit[29] & reg_we & ~wr_err;
  assign cs_app_upd_req_upd_req0_wd = reg_wdata[0];

  assign cs_app_upd_req_upd_req1_we = addr_hit[29] & reg_we & ~wr_err;
  assign cs_app_upd_req_upd_req1_wd = reg_wdata[1];

  assign cs_app_upd_req_upd_req2_we = addr_hit[29] & reg_we & ~wr_err;
  assign cs_app_upd_req_upd_req2_wd = reg_wdata[2];

  assign cs_app_upd_req_upd_req3_we = addr_hit[29] & reg_we & ~wr_err;
  assign cs_app_upd_req_upd_req3_wd = reg_wdata[3];

  assign cs_add_data_clr_add_data_clr0_we = addr_hit[30] & reg_we & ~wr_err;
  assign cs_add_data_clr_add_data_clr0_wd = reg_wdata[0];

  assign cs_add_data_clr_add_data_clr1_we = addr_hit[30] & reg_we & ~wr_err;
  assign cs_add_data_clr_add_data_clr1_wd = reg_wdata[1];

  assign cs_add_data_clr_add_data_clr2_we = addr_hit[30] & reg_we & ~wr_err;
  assign cs_add_data_clr_add_data_clr2_wd = reg_wdata[2];

  assign cs_add_data_clr_add_data_clr3_we = addr_hit[30] & reg_we & ~wr_err;
  assign cs_add_data_clr_add_data_clr3_wd = reg_wdata[3];

  assign cs_app_upd_ack_upd_ack0_we = addr_hit[31] & reg_we & ~wr_err;
  assign cs_app_upd_ack_upd_ack0_wd = reg_wdata[0];

  assign cs_app_upd_ack_upd_ack1_we = addr_hit[31] & reg_we & ~wr_err;
  assign cs_app_upd_ack_upd_ack1_wd = reg_wdata[1];

  assign cs_app_upd_ack_upd_ack2_we = addr_hit[31] & reg_we & ~wr_err;
  assign cs_app_upd_ack_upd_ack2_wd = reg_wdata[2];

  assign cs_app_upd_ack_upd_ack3_we = addr_hit[31] & reg_we & ~wr_err;
  assign cs_app_upd_ack_upd_ack3_wd = reg_wdata[3];

  assign cs_app_upd_sts_upd_sts0_we = addr_hit[32] & reg_we & ~wr_err;
  assign cs_app_upd_sts_upd_sts0_wd = reg_wdata[1:0];

  assign cs_app_upd_sts_upd_sts1_we = addr_hit[32] & reg_we & ~wr_err;
  assign cs_app_upd_sts_upd_sts1_wd = reg_wdata[3:2];

  assign cs_app_upd_sts_upd_sts2_we = addr_hit[32] & reg_we & ~wr_err;
  assign cs_app_upd_sts_upd_sts2_wd = reg_wdata[5:4];

  assign cs_app_upd_sts_upd_sts3_we = addr_hit[32] & reg_we & ~wr_err;
  assign cs_app_upd_sts_upd_sts3_wd = reg_wdata[7:6];

  assign cs_add_data_fifo_sts_add_data_fifo_sts0_re = addr_hit[33] && reg_re;

  assign cs_add_data_fifo_sts_add_data_fifo_sts1_re = addr_hit[33] && reg_re;

  assign cs_add_data_fifo_sts_add_data_fifo_sts2_re = addr_hit[33] && reg_re;

  assign cs_add_data_fifo_sts_add_data_fifo_sts3_re = addr_hit[33] && reg_re;

  assign cs_add_data_in0_we = addr_hit[34] & reg_we & ~wr_err;
  assign cs_add_data_in0_wd = reg_wdata[31:0];

  assign cs_add_data_in1_we = addr_hit[35] & reg_we & ~wr_err;
  assign cs_add_data_in1_wd = reg_wdata[31:0];

  assign cs_add_data_in2_we = addr_hit[36] & reg_we & ~wr_err;
  assign cs_add_data_in2_wd = reg_wdata[31:0];

  assign cs_add_data_in3_we = addr_hit[37] & reg_we & ~wr_err;
  assign cs_add_data_in3_wd = reg_wdata[31:0];

  assign cs_app_uni_req_uni_req0_we = addr_hit[38] & reg_we & ~wr_err;
  assign cs_app_uni_req_uni_req0_wd = reg_wdata[0];

  assign cs_app_uni_req_uni_req1_we = addr_hit[38] & reg_we & ~wr_err;
  assign cs_app_uni_req_uni_req1_wd = reg_wdata[1];

  assign cs_app_uni_req_uni_req2_we = addr_hit[38] & reg_we & ~wr_err;
  assign cs_app_uni_req_uni_req2_wd = reg_wdata[2];

  assign cs_app_uni_req_uni_req3_we = addr_hit[38] & reg_we & ~wr_err;
  assign cs_app_uni_req_uni_req3_wd = reg_wdata[3];

  assign cs_app_uni_ack_uni_ack0_we = addr_hit[39] & reg_we & ~wr_err;
  assign cs_app_uni_ack_uni_ack0_wd = reg_wdata[0];

  assign cs_app_uni_ack_uni_ack1_we = addr_hit[39] & reg_we & ~wr_err;
  assign cs_app_uni_ack_uni_ack1_wd = reg_wdata[1];

  assign cs_app_uni_ack_uni_ack2_we = addr_hit[39] & reg_we & ~wr_err;
  assign cs_app_uni_ack_uni_ack2_wd = reg_wdata[2];

  assign cs_app_uni_ack_uni_ack3_we = addr_hit[39] & reg_we & ~wr_err;
  assign cs_app_uni_ack_uni_ack3_wd = reg_wdata[3];

  assign cs_app_uni_sts_uni_sts0_we = addr_hit[40] & reg_we & ~wr_err;
  assign cs_app_uni_sts_uni_sts0_wd = reg_wdata[1:0];

  assign cs_app_uni_sts_uni_sts1_we = addr_hit[40] & reg_we & ~wr_err;
  assign cs_app_uni_sts_uni_sts1_wd = reg_wdata[3:2];

  assign cs_app_uni_sts_uni_sts2_we = addr_hit[40] & reg_we & ~wr_err;
  assign cs_app_uni_sts_uni_sts2_wd = reg_wdata[5:4];

  assign cs_app_uni_sts_uni_sts3_we = addr_hit[40] & reg_we & ~wr_err;
  assign cs_app_uni_sts_uni_sts3_wd = reg_wdata[7:6];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_cs_ins_req_done_qs;
        reg_rdata_next[1] = intr_state_cs_res_req_done_qs;
        reg_rdata_next[2] = intr_state_cs_gen_req_done_qs;
        reg_rdata_next[3] = intr_state_cs_upd_req_done_qs;
        reg_rdata_next[4] = intr_state_cs_uni_req_done_qs;
        reg_rdata_next[5] = intr_state_cs_fifo_err_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_cs_ins_req_done_qs;
        reg_rdata_next[1] = intr_enable_cs_res_req_done_qs;
        reg_rdata_next[2] = intr_enable_cs_gen_req_done_qs;
        reg_rdata_next[3] = intr_enable_cs_upd_req_done_qs;
        reg_rdata_next[4] = intr_enable_cs_uni_req_done_qs;
        reg_rdata_next[5] = intr_enable_cs_fifo_err_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = cs_regen_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = cs_ctrl_cs_enable_qs;
        reg_rdata_next[19:16] = cs_ctrl_fifo_depth_sts_sel_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[23:0] = cs_sum_sts_fifo_depth_sts_qs;
        reg_rdata_next[31] = cs_sum_sts_diag_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = cs_det_mode_det_mode0_qs;
        reg_rdata_next[1] = cs_det_mode_det_mode1_qs;
        reg_rdata_next[2] = cs_det_mode_det_mode2_qs;
        reg_rdata_next[3] = cs_det_mode_det_mode3_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = cs_app_ins_ack_ins_ack0_qs;
        reg_rdata_next[1] = cs_app_ins_ack_ins_ack1_qs;
        reg_rdata_next[2] = cs_app_ins_ack_ins_ack2_qs;
        reg_rdata_next[3] = cs_app_ins_ack_ins_ack3_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[1:0] = cs_app_ins_sts_ins_sts0_qs;
        reg_rdata_next[3:2] = cs_app_ins_sts_ins_sts1_qs;
        reg_rdata_next[5:4] = cs_app_ins_sts_ins_sts2_qs;
        reg_rdata_next[7:6] = cs_app_ins_sts_ins_sts3_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[1:0] = cs_app_seed_fifo_sts_app_seed_fifo_sts0_qs;
        reg_rdata_next[3:2] = cs_app_seed_fifo_sts_app_seed_fifo_sts1_qs;
        reg_rdata_next[5:4] = cs_app_seed_fifo_sts_app_seed_fifo_sts2_qs;
        reg_rdata_next[7:6] = cs_app_seed_fifo_sts_app_seed_fifo_sts3_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = cs_app_res_ack_res_ack0_qs;
        reg_rdata_next[1] = cs_app_res_ack_res_ack1_qs;
        reg_rdata_next[2] = cs_app_res_ack_res_ack2_qs;
        reg_rdata_next[3] = cs_app_res_ack_res_ack3_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[1:0] = cs_app_res_sts_res_sts0_qs;
        reg_rdata_next[3:2] = cs_app_res_sts_res_sts1_qs;
        reg_rdata_next[5:4] = cs_app_res_sts_res_sts2_qs;
        reg_rdata_next[7:6] = cs_app_res_sts_res_sts3_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = cs_app_pre_res_pre_res0_qs;
        reg_rdata_next[1] = cs_app_pre_res_pre_res1_qs;
        reg_rdata_next[2] = cs_app_pre_res_pre_res2_qs;
        reg_rdata_next[3] = cs_app_pre_res_pre_res3_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = cs_app_gen_ack_gen_ack0_qs;
        reg_rdata_next[1] = cs_app_gen_ack_gen_ack1_qs;
        reg_rdata_next[2] = cs_app_gen_ack_gen_ack2_qs;
        reg_rdata_next[3] = cs_app_gen_ack_gen_ack3_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[1:0] = cs_app_gen_sts_gen_sts0_qs;
        reg_rdata_next[3:2] = cs_app_gen_sts_gen_sts1_qs;
        reg_rdata_next[5:4] = cs_app_gen_sts_gen_sts2_qs;
        reg_rdata_next[7:6] = cs_app_gen_sts_gen_sts3_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = cs_app_gen_rnd_out_vld_rnd_out_vld0_qs;
        reg_rdata_next[1] = cs_app_gen_rnd_out_vld_rnd_out_vld1_qs;
        reg_rdata_next[2] = cs_app_gen_rnd_out_vld_rnd_out_vld2_qs;
        reg_rdata_next[3] = cs_app_gen_rnd_out_vld_rnd_out_vld3_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = cs_rnd_out_bits0_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = cs_rnd_out_bits1_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = cs_rnd_out_bits2_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = cs_rnd_out_bits3_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
      end

      addr_hit[31]: begin
        reg_rdata_next[0] = cs_app_upd_ack_upd_ack0_qs;
        reg_rdata_next[1] = cs_app_upd_ack_upd_ack1_qs;
        reg_rdata_next[2] = cs_app_upd_ack_upd_ack2_qs;
        reg_rdata_next[3] = cs_app_upd_ack_upd_ack3_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[1:0] = cs_app_upd_sts_upd_sts0_qs;
        reg_rdata_next[3:2] = cs_app_upd_sts_upd_sts1_qs;
        reg_rdata_next[5:4] = cs_app_upd_sts_upd_sts2_qs;
        reg_rdata_next[7:6] = cs_app_upd_sts_upd_sts3_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[1:0] = cs_add_data_fifo_sts_add_data_fifo_sts0_qs;
        reg_rdata_next[3:2] = cs_add_data_fifo_sts_add_data_fifo_sts1_qs;
        reg_rdata_next[5:4] = cs_add_data_fifo_sts_add_data_fifo_sts2_qs;
        reg_rdata_next[7:6] = cs_add_data_fifo_sts_add_data_fifo_sts3_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[38]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
      end

      addr_hit[39]: begin
        reg_rdata_next[0] = cs_app_uni_ack_uni_ack0_qs;
        reg_rdata_next[1] = cs_app_uni_ack_uni_ack1_qs;
        reg_rdata_next[2] = cs_app_uni_ack_uni_ack2_qs;
        reg_rdata_next[3] = cs_app_uni_ack_uni_ack3_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[1:0] = cs_app_uni_sts_uni_sts0_qs;
        reg_rdata_next[3:2] = cs_app_uni_sts_uni_sts1_qs;
        reg_rdata_next[5:4] = cs_app_uni_sts_uni_sts2_qs;
        reg_rdata_next[7:6] = cs_app_uni_sts_uni_sts3_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we)
  `ASSERT_PULSE(rePulse, reg_re)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  `ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0)

endmodule
